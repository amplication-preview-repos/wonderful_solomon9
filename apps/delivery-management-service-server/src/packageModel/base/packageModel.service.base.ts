/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PackageModel as PrismaPackageModel,
  DeliveryRequest as PrismaDeliveryRequest,
} from "@prisma/client";

export class PackageModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PackageModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.packageModel.count(args);
  }

  async packageModels<T extends Prisma.PackageModelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PackageModelFindManyArgs>
  ): Promise<PrismaPackageModel[]> {
    return this.prisma.packageModel.findMany<Prisma.PackageModelFindManyArgs>(
      args
    );
  }
  async packageModel<T extends Prisma.PackageModelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PackageModelFindUniqueArgs>
  ): Promise<PrismaPackageModel | null> {
    return this.prisma.packageModel.findUnique(args);
  }
  async createPackageModel<T extends Prisma.PackageModelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PackageModelCreateArgs>
  ): Promise<PrismaPackageModel> {
    return this.prisma.packageModel.create<T>(args);
  }
  async updatePackageModel<T extends Prisma.PackageModelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PackageModelUpdateArgs>
  ): Promise<PrismaPackageModel> {
    return this.prisma.packageModel.update<T>(args);
  }
  async deletePackageModel<T extends Prisma.PackageModelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PackageModelDeleteArgs>
  ): Promise<PrismaPackageModel> {
    return this.prisma.packageModel.delete(args);
  }

  async getDeliveryRequest(
    parentId: string
  ): Promise<PrismaDeliveryRequest | null> {
    return this.prisma.packageModel
      .findUnique({
        where: { id: parentId },
      })
      .deliveryRequest();
  }
}

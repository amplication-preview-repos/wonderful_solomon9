/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeliveryRequest } from "./DeliveryRequest";
import { DeliveryRequestCountArgs } from "./DeliveryRequestCountArgs";
import { DeliveryRequestFindManyArgs } from "./DeliveryRequestFindManyArgs";
import { DeliveryRequestFindUniqueArgs } from "./DeliveryRequestFindUniqueArgs";
import { CreateDeliveryRequestArgs } from "./CreateDeliveryRequestArgs";
import { UpdateDeliveryRequestArgs } from "./UpdateDeliveryRequestArgs";
import { DeleteDeliveryRequestArgs } from "./DeleteDeliveryRequestArgs";
import { PackageModelFindManyArgs } from "../../packageModel/base/PackageModelFindManyArgs";
import { PackageModel } from "../../packageModel/base/PackageModel";
import { Company } from "../../company/base/Company";
import { DeliveryRequestService } from "../deliveryRequest.service";
@graphql.Resolver(() => DeliveryRequest)
export class DeliveryRequestResolverBase {
  constructor(protected readonly service: DeliveryRequestService) {}

  async _deliveryRequestsMeta(
    @graphql.Args() args: DeliveryRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DeliveryRequest])
  async deliveryRequests(
    @graphql.Args() args: DeliveryRequestFindManyArgs
  ): Promise<DeliveryRequest[]> {
    return this.service.deliveryRequests(args);
  }

  @graphql.Query(() => DeliveryRequest, { nullable: true })
  async deliveryRequest(
    @graphql.Args() args: DeliveryRequestFindUniqueArgs
  ): Promise<DeliveryRequest | null> {
    const result = await this.service.deliveryRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DeliveryRequest)
  async createDeliveryRequest(
    @graphql.Args() args: CreateDeliveryRequestArgs
  ): Promise<DeliveryRequest> {
    return await this.service.createDeliveryRequest({
      ...args,
      data: {
        ...args.data,

        company: args.data.company
          ? {
              connect: args.data.company,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DeliveryRequest)
  async updateDeliveryRequest(
    @graphql.Args() args: UpdateDeliveryRequestArgs
  ): Promise<DeliveryRequest | null> {
    try {
      return await this.service.updateDeliveryRequest({
        ...args,
        data: {
          ...args.data,

          company: args.data.company
            ? {
                connect: args.data.company,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryRequest)
  async deleteDeliveryRequest(
    @graphql.Args() args: DeleteDeliveryRequestArgs
  ): Promise<DeliveryRequest | null> {
    try {
      return await this.service.deleteDeliveryRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [PackageModel], { name: "packages" })
  async findPackages(
    @graphql.Parent() parent: DeliveryRequest,
    @graphql.Args() args: PackageModelFindManyArgs
  ): Promise<PackageModel[]> {
    const results = await this.service.findPackages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Company, {
    nullable: true,
    name: "company",
  })
  async getCompany(
    @graphql.Parent() parent: DeliveryRequest
  ): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DeliveryRequest as PrismaDeliveryRequest,
  PackageModel as PrismaPackageModel,
  Company as PrismaCompany,
} from "@prisma/client";

export class DeliveryRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeliveryRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.deliveryRequest.count(args);
  }

  async deliveryRequests<T extends Prisma.DeliveryRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeliveryRequestFindManyArgs>
  ): Promise<PrismaDeliveryRequest[]> {
    return this.prisma.deliveryRequest.findMany<Prisma.DeliveryRequestFindManyArgs>(
      args
    );
  }
  async deliveryRequest<T extends Prisma.DeliveryRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeliveryRequestFindUniqueArgs>
  ): Promise<PrismaDeliveryRequest | null> {
    return this.prisma.deliveryRequest.findUnique(args);
  }
  async createDeliveryRequest<T extends Prisma.DeliveryRequestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeliveryRequestCreateArgs>
  ): Promise<PrismaDeliveryRequest> {
    return this.prisma.deliveryRequest.create<T>(args);
  }
  async updateDeliveryRequest<T extends Prisma.DeliveryRequestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeliveryRequestUpdateArgs>
  ): Promise<PrismaDeliveryRequest> {
    return this.prisma.deliveryRequest.update<T>(args);
  }
  async deleteDeliveryRequest<T extends Prisma.DeliveryRequestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeliveryRequestDeleteArgs>
  ): Promise<PrismaDeliveryRequest> {
    return this.prisma.deliveryRequest.delete(args);
  }

  async findPackages(
    parentId: string,
    args: Prisma.PackageModelFindManyArgs
  ): Promise<PrismaPackageModel[]> {
    return this.prisma.deliveryRequest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .packages(args);
  }

  async getCompany(parentId: string): Promise<PrismaCompany | null> {
    return this.prisma.deliveryRequest
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }
}
